<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nexus Quotes | Futuristic Quote Generator</title>
    <style>
        :root {
            --primary: #6e48aa;
            --secondary: #9d50bb;
            --dark: #1a1a2e;
            --light: #f8f9fa;
            --accent: #00dbde;
            --text: #e6e6e6;
            --card-bg: rgba(30, 30, 50, 0.7);
            --transition-speed: 0.5s;
        }

        [data-theme="light"] {
            --dark: #f8f9fa;
            --light: #1a1a2e;
            --text: #333;
            --card-bg: rgba(255, 255, 255, 0.9);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(135deg, var(--dark), #16213e);
            color: var(--text);
            min-height: 100vh;
            transition: background var(--transition-speed) ease;
            overflow-x: hidden;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 0;
            margin-bottom: 2rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .logo {
            font-size: 2rem;
            font-weight: 700;
            background: linear-gradient(to right, var(--accent), var(--secondary));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
        }

        .theme-toggle {
            background: var(--card-bg);
            border: none;
            color: var(--text);
            padding: 0.5rem 1rem;
            border-radius: 50px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .theme-toggle:hover {
            transform: scale(1.05);
        }

        .hero {
            text-align: center;
            margin-bottom: 3rem;
        }

        .hero h1 {
            font-size: 3rem;
            margin-bottom: 1rem;
            background: linear-gradient(to right, var(--accent), var(--secondary));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
        }

        .hero p {
            font-size: 1.2rem;
            opacity: 0.8;
            max-width: 700px;
            margin: 0 auto;
        }

        .quote-container {
            background: var(--card-bg);
            border-radius: 20px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: all var(--transition-speed) ease;
            min-height: 300px;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .quote-text {
            font-size: 1.8rem;
            line-height: 1.6;
            margin-bottom: 1.5rem;
            position: relative;
            padding-left: 2rem;
        }

        .quote-text::before {
            content: '"';
            font-size: 4rem;
            position: absolute;
            left: -1rem;
            top: -1.5rem;
            opacity: 0.2;
        }

        .quote-author {
            font-size: 1.2rem;
            font-style: italic;
            text-align: right;
            opacity: 0.8;
        }

        .controls {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
            flex-wrap: wrap;
        }

        .btn {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            border: none;
            color: white;
            padding: 0.8rem 1.5rem;
            border-radius: 50px;
            cursor: pointer;
            font-size: 1rem;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .btn-outline {
            background: transparent;
            border: 1px solid var(--secondary);
            color: var(--text);
        }

        .btn-outline:hover {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
        }

        .category-selector {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 2rem;
            flex-wrap: wrap;
        }

        .category-btn {
            background: var(--card-bg);
            border: 1px solid rgba(255, 255, 255, 0.1);
            color: var(--text);
            padding: 0.5rem 1rem;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .category-btn.active {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
        }

        .features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            margin-bottom: 3rem;
        }

        .feature-card {
            background: var(--card-bg);
            border-radius: 15px;
            padding: 1.5rem;
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
        }

        .feature-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
        }

        .feature-card h3 {
            margin-bottom: 1rem;
            color: var(--accent);
        }

        .settings-panel {
            background: var(--card-bg);
            border-radius: 15px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
        }

        .settings-panel h2 {
            margin-bottom: 1rem;
            color: var(--accent);
        }

        .setting-item {
            margin-bottom: 1rem;
        }

        .setting-item label {
            display: block;
            margin-bottom: 0.5rem;
        }

        .slider {
            width: 100%;
            height: 10px;
            border-radius: 5px;
            background: rgba(255, 255, 255, 0.1);
            outline: none;
            -webkit-appearance: none;
        }

        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: var(--secondary);
            cursor: pointer;
        }

        .submit-quote {
            background: var(--card-bg);
            border-radius: 15px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
        }

        .submit-quote h2 {
            margin-bottom: 1rem;
            color: var(--accent);
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
        }

        .form-group input, .form-group textarea, .form-group select {
            width: 100%;
            padding: 0.8rem;
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            background: rgba(0, 0, 0, 0.2);
            color: var(--text);
        }

        .quote-of-the-day {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 2rem;
            position: relative;
            overflow: hidden;
        }

        .quote-of-the-day::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
            animation: rotate 20s linear infinite;
        }

        @keyframes rotate {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .quote-of-the-day h2 {
            margin-bottom: 1rem;
            position: relative;
        }

        .typing-animation {
            display: inline-block;
            overflow: hidden;
            border-right: 2px solid var(--accent);
            white-space: nowrap;
            animation: typing 3.5s steps(40, end), blink-caret 0.75s step-end infinite;
        }

        @keyframes typing {
            from { width: 0 }
            to { width: 100% }
        }

        @keyframes blink-caret {
            from, to { border-color: transparent }
            50% { border-color: var(--accent); }
        }

        footer {
            text-align: center;
            padding: 2rem 0;
            margin-top: 2rem;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .hero h1 {
                font-size: 2rem;
            }
            
            .quote-text {
                font-size: 1.4rem;
            }
            
            .controls {
                justify-content: center;
            }
        }

        /* Mood-based backgrounds */
        .mood-motivational {
            background: linear-gradient(135deg, #ff758c, #ff7eb3);
        }
        .mood-wisdom {
            background: linear-gradient(135deg, #4facfe, #00f2fe);
        }
        .mood-funny {
            background: linear-gradient(135deg, #f6d365, #fda085);
        }
        .mood-inspirational {
            background: linear-gradient(135deg, #a18cd1, #fbc2eb);
        }
        .mood-default {
            background: linear-gradient(135deg, var(--dark), #16213e);
        }
          .quote-vote {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 10px;
        }

        .quote-vote button {
            background: transparent;
            border: none;
            font-size: 1.2em;
            cursor: pointer;
        }

        .grid-toggle {
            text-align: center;
            margin: 20px 0;
        }

        .quote-grid {
            display: none;
            flex-wrap: wrap;
            gap: 20px;
            justify-content: center;
            margin-top: 20px;
        }

        .quote-grid.active {
            display: flex;
        }

        .grid-quote {
            width: 300px;
            padding: 15px;
            background: var(--card-bg, #f0f0f0);
            border-radius: 12px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }

        .soundscape-controls {
    text-align: center;
    margin-top: 15px;
}

.soundscape-controls button {
    padding: 10px 20px;
    font-size: 1rem;
    background: linear-gradient(135deg, #6e8efb, #a777e3);
    color: white;
    border: none;
    border-radius: 8px;
    box-shadow: 0 4px 10px rgba(0,0,0,0.15);
    cursor: pointer;
    transition: all 0.3s ease;
}

.soundscape-controls button:hover {
    transform: scale(1.05);
    box-shadow: 0 6px 15px rgba(0,0,0,0.25);
}


        .author-info {
            color: blue;
            text-decoration: underline;
            cursor: pointer;
        }

        .gamification {
            margin-top: 30px;
            text-align: center;
            font-weight: bold;
        }

         .btn {
    background: linear-gradient(to right, #6a11cb, #2575fc);
    color: white;
    border: none;
    padding: 0.6em 1.5em;
    font-size: 1em;
    border-radius: 12px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    cursor: pointer;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15);
  }

  .btn-outline {
    border: 2px solid #2575fc;
    background: transparent;
    color: #2575fc;
    padding: 0.6em 1.5em;
    font-size: 1em;
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .btn-outline:hover {
    background: #2575fc;
    color: white;
  }

  .soundscape-controls {
    text-align: center;
    margin-top: 15px;
  }
    </style>
</head>
<body>
  <div class="container">
    <header>
      <div class="logo">Nexus Quotes</div>
      <button class="theme-toggle" id="themeToggle">
        <span class="icon">🌙</span>
        <span class="text">Dark Mode</span>
      </button>
    </header>

    <section class="hero">
      <h1>Discover Wisdom in Every Word</h1>
      <p>An advanced quote generator with dynamic features, beautiful animations, and personalized settings.</p>
    </section>

    <section class="quote-of-the-day">
      <h2>Quote of the Day</h2>
      <div id="quoteOfTheDay">
        <p class="quote-text">Loading today's special quote...</p>
        <p class="quote-author"></p>
        <div class="quote-vote">
          <button class="vote-btn upvote">👍</button>
          <span class="vote-score">0</span>
          <button class="vote-btn downvote">👎</button>
        </div>
      </div>
    </section>

    <section class="quote-container" id="quoteContainer">
      <p class="quote-text" id="quoteText">Click the button below to generate a random quote</p>
      <p class="quote-author" id="quoteAuthor"></p>
      <div class="quote-vote">
        <button class="vote-btn upvote">👍</button>
        <span class="vote-score">0</span>
        <button class="vote-btn downvote">👎</button>
      </div>
    </section>

    <div class="category-selector" id="categorySelector">
      <button class="category-btn active" data-category="all">All</button>
      <button class="category-btn" data-category="motivational">Motivational</button>
      <button class="category-btn" data-category="wisdom">Wisdom</button>
      <button class="category-btn" data-category="funny">Funny</button>
      <button class="category-btn" data-category="inspirational">Inspirational</button>
    </div>

    <div class="controls">
      <button class="btn" id="nextQuoteBtn">
        <span class="icon">✨</span>
        <span class="text">Next Quote</span>
      </button>
      <button class="btn btn-outline" id="speakBtn">
        <span class="icon">🔊</span>
        <span class="text">Read Aloud</span>
      </button>
      <button class="btn btn-outline" id="copyBtn">
        <span class="icon">📋</span>
        <span class="text">Copy Quote</span>
      </button>
      <button class="btn btn-outline" id="tweetBtn">
        <span class="icon">🐦</span>
        <span class="text">Tweet</span>
      </button>
      <button class="btn btn-outline" id="toggleAutoBtn">
        <span class="icon">⏱️</span>
        <span class="text">Auto: Off</span>
      </button>
    </div>

    <section class="settings-panel">
      <h2>Customize Your Experience</h2>
      <div class="setting-item">
        <label for="fontSize">Font Size</label>
        <input type="range" id="fontSize" class="slider" min="14" max="30" value="18">
      </div>
      <div class="setting-item">
        <label for="transitionSpeed">Transition Speed</label>
        <input type="range" id="transitionSpeed" class="slider" min="0.1" max="2" step="0.1" value="0.5">
      </div>
      <div class="setting-item">
        <label for="autoRotateTime">Auto Rotate Time (seconds)</label>
        <input type="range" id="autoRotateTime" class="slider" min="5" max="120" step="5" value="30">
      </div>
    </section>

    <section class="submit-quote">
      <h2>Share Your Wisdom</h2>
      <div class="form-group">
        <label for="userQuote">Your Quote</label>
        <textarea id="userQuote" rows="3" placeholder="Enter your inspirational quote..."></textarea>
      </div>
      <div class="form-group">
        <label for="userAuthor">Author (optional)</label>
        <input type="text" id="userAuthor" placeholder="Your name or leave anonymous">
      </div>
      <div class="form-group">
        <label for="userCategory">Category</label>
        <select id="userCategory">
          <option value="motivational">Motivational</option>
          <option value="wisdom">Wisdom</option>
          <option value="funny">Funny</option>
          <option value="inspirational">Inspirational</option>
        </select>
      </div>
      <button class="btn" id="submitQuoteBtn">Submit Quote</button>
    </section>

    <section class="features">
      <div class="feature-card">
        <h3>Dynamic Quotes</h3>
        <p>Access thousands of quotes from our curated collection or external APIs, filtered by category.</p>
      </div>
      <div class="feature-card">
        <h3>Text-to-Speech</h3>
        <p>Listen to quotes with our integrated Web Speech API. Perfect for accessibility and multitasking.</p>
      </div>
      <div class="feature-card">
        <h3>Share Anywhere</h3>
        <p>Easily copy quotes or share them directly to Twitter with one click.</p>
      </div>
      <div class="feature-card">
        <h3>Daily Inspiration</h3>
        <p>Get a special quote of the day that changes at midnight, giving you consistent daily wisdom.</p>
      </div>
      <div class="feature-card">
        <h3>Mood Matching</h3>
        <p>Our system changes colors based on the quote's mood, creating a more immersive experience.</p>
      </div>
      <div class="feature-card">
        <h3>Fully Customizable</h3>
        <p>Adjust font sizes, transition speeds, and more to create your perfect quote experience.</p>
      </div>
    </section>

    <div class="grid-toggle">
      <button class="btn" id="toggleGridBtn">🔲 Grid View</button>
    </div>

    <section class="quote-grid" id="quoteGrid">
      <!-- Grid Quotes Will Be Injected Here -->
    </section>

    <div class="soundscape-controls">
      <button class="btn-outline" id="playSoundscapeBtn">🎶 Play Background</button>
    </div>

    <div class="gamification">
      <p>🔥 Streak: <span id="streakCount">0</span> days</p>
      <p>🏆 Rewards: <span id="rewardPoints">0</span> points</p>
    </div>

    <footer>
      <p>© 2023 Nexus Quotes | All Rights Reserved</p>
      <p>Created with ❤️ for quote lovers everywhere</p>
    </footer>
  </div>


    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // DOM Elements
            const quoteText = document.getElementById('quoteText');
            const quoteAuthor = document.getElementById('quoteAuthor');
            const nextQuoteBtn = document.getElementById('nextQuoteBtn');
            const speakBtn = document.getElementById('speakBtn');
            const copyBtn = document.getElementById('copyBtn');
            const tweetBtn = document.getElementById('tweetBtn');
            const toggleAutoBtn = document.getElementById('toggleAutoBtn');
            const categoryBtns = document.querySelectorAll('.category-btn');
            const themeToggle = document.getElementById('themeToggle');
            const fontSizeSlider = document.getElementById('fontSize');
            const transitionSpeedSlider = document.getElementById('transitionSpeed');
            const autoRotateTimeSlider = document.getElementById('autoRotateTime');
            const submitQuoteBtn = document.getElementById('submitQuoteBtn');
            const userQuoteInput = document.getElementById('userQuote');
            const userAuthorInput = document.getElementById('userAuthor');
            const userCategorySelect = document.getElementById('userCategory');
            const quoteOfTheDay = document.getElementById('quoteOfTheDay');
            const quoteContainer = document.getElementById('quoteContainer');

            // State variables
            let quotes = [];
            let filteredQuotes = [];
            let currentCategory = 'all';
            let autoRotateInterval = null;
            let isAutoRotateOn = false;
            let currentQuoteIndex = -1;
            let quoteOfTheDayIndex = -1;

            // Initialize the app
            init();

            async function init() {
                loadSettings();
                await fetchQuotes();
                setQuoteOfTheDay();
                displayRandomQuote();
                setupEventListeners();
            }

            async function fetchQuotes() {
                try {
                    // First try to load from local storage
                    const savedQuotes = localStorage.getItem('userQuotes');
                    const defaultQuotes = [
                        {
                            text: "The only way to do great work is to love what you do.",
                            author: "Steve Jobs",
                            category: "motivational"
                        },
                        {
                            text: "Life is what happens when you're busy making other plans.",
                            author: "John Lennon",
                            category: "wisdom"
                        },
                        {
                            text: "The future belongs to those who believe in the beauty of their dreams.",
                            author: "Eleanor Roosevelt",
                            category: "inspirational"
                        },
                        {
                            text: "I'm not superstitious, but I am a little stitious.",
                            author: "Michael Scott",
                            category: "funny"
                        },
                        {
                            text: "In the middle of every difficulty lies opportunity.",
                            author: "Albert Einstein",
                            category: "wisdom"
                        },
                        {
                            text: "Success is not final, failure is not fatal: It is the courage to continue that counts.",
                            author: "Winston Churchill",
                            category: "motivational"
                        },
                        {
                            text: "The only limit to our realization of tomorrow is our doubts of today.",
                            author: "Franklin D. Roosevelt",
                            category: "inspirational"
                        },
                        {
                            text: "I always wanted to be somebody, but now I realize I should have been more specific.",
                            author: "Lily Tomlin",
                            category: "funny"
                        },
                        {
                            text: "Do not watch the clock. Do what it does. Keep going.",
                            author: "Sam Levenson",
                            category: "motivational"
                        },
                        {
                            text: "The best way to predict the future is to invent it.",
                            author: "Alan Kay",
                            category: "wisdom"
                        }
                    ];

                    if (savedQuotes) {
                        quotes = [...defaultQuotes, ...JSON.parse(savedQuotes)];
                    } else {
                        quotes = defaultQuotes;
                    }

                    // Then try to fetch from API
                    try {
                        const response = await fetch('https://type.fit/api/quotes');
                        const apiQuotes = await response.json();
                        const formattedApiQuotes = apiQuotes.map(quote => ({
                            text: quote.text,
                            author: quote.author || "Unknown",
                            category: getRandomCategory()
                        })).slice(0, 50); // Limit to 50 quotes from API

                        quotes = [...quotes, ...formattedApiQuotes];
                    } catch (error) {
                        console.log("Using local quotes only. API failed to load:", error);
                    }

                    filterQuotesByCategory();
                } catch (error) {
                    console.error("Error loading quotes:", error);
                    quotes = [{
                        text: "Failed to load quotes. Please check your connection.",
                        author: "System",
                        category: "wisdom"
                    }];
                    filterQuotesByCategory();
                }
            }

            function getRandomCategory() {
                const categories = ['motivational', 'wisdom', 'funny', 'inspirational'];
                return categories[Math.floor(Math.random() * categories.length)];
            }

            function filterQuotesByCategory() {
                if (currentCategory === 'all') {
                    filteredQuotes = [...quotes];
                } else {
                    filteredQuotes = quotes.filter(quote => quote.category === currentCategory);
                }
            }

            function displayRandomQuote() {
                if (filteredQuotes.length === 0) {
                    quoteText.textContent = "No quotes available in this category.";
                    quoteAuthor.textContent = "";
                    return;
                }

                let randomIndex;
                do {
                    randomIndex = Math.floor(Math.random() * filteredQuotes.length);
                } while (randomIndex === currentQuoteIndex && filteredQuotes.length > 1);
                
                currentQuoteIndex = randomIndex;
                const quote = filteredQuotes[randomIndex];

                // Apply fade out
                quoteContainer.style.opacity = 0;

                setTimeout(() => {
                    quoteText.textContent = quote.text;
                    quoteAuthor.textContent = `— ${quote.author}`;
                    
                    // Apply mood-based styling
                    applyMoodStyling(quote.category);
                    
                    // Apply fade in
                    quoteContainer.style.opacity = 1;
                }, parseFloat(getComputedStyle(quoteContainer).transitionDuration) * 1000 / 2);
            }

            function applyMoodStyling(category) {
                // Remove all mood classes first
                document.body.classList.remove(
                    'mood-motivational',
                    'mood-wisdom',
                    'mood-funny',
                    'mood-inspirational',
                    'mood-default'
                );

                // Add the appropriate mood class
                document.body.classList.add(`mood-${category}`);
            }

            function setQuoteOfTheDay() {
                if (quotes.length === 0) return;

                // Use the day of the year to select a consistent quote
                const now = new Date();
                const start = new Date(now.getFullYear(), 0, 0);
                const diff = now - start;
                const oneDay = 1000 * 60 * 60 * 24;
                const dayOfYear = Math.floor(diff / oneDay);

                quoteOfTheDayIndex = dayOfYear % quotes.length;
                const quote = quotes[quoteOfTheDayIndex];

                const quoteOfTheDayText = quoteOfTheDay.querySelector('.quote-text');
                const quoteOfTheDayAuthor = quoteOfTheDay.querySelector('.quote-author');

                quoteOfTheDayText.textContent = quote.text;
                quoteOfTheDayAuthor.textContent = `— ${quote.author}`;
            }

            function speakQuote() {
                if ('speechSynthesis' in window) {
                    const utterance = new SpeechSynthesisUtterance();
                    utterance.text = `${quoteText.textContent} by ${quoteAuthor.textContent}`;
                    utterance.rate = 0.9;
                    utterance.pitch = 1;
                    window.speechSynthesis.speak(utterance);
                } else {
                    alert("Text-to-speech is not supported in your browser.");
                }
            }

            function copyQuoteToClipboard() {
                const textToCopy = `${quoteText.textContent} ${quoteAuthor.textContent}`;
                navigator.clipboard.writeText(textToCopy).then(() => {
                    // Visual feedback
                    const originalText = copyBtn.querySelector('.text').textContent;
                    copyBtn.querySelector('.text').textContent = "Copied!";
                    setTimeout(() => {
                        copyBtn.querySelector('.text').textContent = originalText;
                    }, 2000);
                }).catch(err => {
                    console.error('Failed to copy: ', err);
                });
            }

            function shareOnTwitter() {
                const text = encodeURIComponent(`${quoteText.textContent} ${quoteAuthor.textContent}`);
                const url = encodeURIComponent(window.location.href);
                window.open(`https://twitter.com/intent/tweet?text=${text}&url=${url}`, '_blank');
            }

            function toggleAutoRotate() {
                isAutoRotateOn = !isAutoRotateOn;
                
                if (isAutoRotateOn) {
                    const intervalTime = parseInt(autoRotateTimeSlider.value) * 1000;
                    autoRotateInterval = setInterval(displayRandomQuote, intervalTime);
                    toggleAutoBtn.querySelector('.text').textContent = `Auto: On (${autoRotateTimeSlider.value}s)`;
                    toggleAutoBtn.classList.remove('btn-outline');
                    toggleAutoBtn.classList.add('btn');
                } else {
                    clearInterval(autoRotateInterval);
                    autoRotateInterval = null;
                    toggleAutoBtn.querySelector('.text').textContent = "Auto: Off";
                    toggleAutoBtn.classList.add('btn-outline');
                    toggleAutoBtn.classList.remove('btn');
                }
            }

            function loadSettings() {
                // Theme
                const savedTheme = localStorage.getItem('theme') || 'dark';
                document.documentElement.setAttribute('data-theme', savedTheme);
                
                if (savedTheme === 'light') {
                    themeToggle.querySelector('.icon').textContent = '☀️';
                    themeToggle.querySelector('.text').textContent = 'Light Mode';
                }
                
                // Font size
                const savedFontSize = localStorage.getItem('fontSize') || '18';
                fontSizeSlider.value = savedFontSize;
                document.documentElement.style.setProperty('--base-font-size', `${savedFontSize}px`);
                
                // Transition speed
                const savedTransitionSpeed = localStorage.getItem('transitionSpeed') || '0.5';
                transitionSpeedSlider.value = savedTransitionSpeed;
                document.documentElement.style.setProperty('--transition-speed', `${savedTransitionSpeed}s`);
                
                // Auto rotate time
                const savedAutoRotateTime = localStorage.getItem('autoRotateTime') || '30';
                autoRotateTimeSlider.value = savedAutoRotateTime;
            }

            function saveSetting(key, value) {
                localStorage.setItem(key, value);
            }

            function submitUserQuote() {
                const text = userQuoteInput.value.trim();
                const author = userAuthorInput.value.trim() || "Anonymous";
                const category = userCategorySelect.value;
                
                if (!text) {
                    alert("Please enter a quote!");
                    return;
                }
                
                const newQuote = {
                    text,
                    author,
                    category
                };
                
                // Add to quotes array
                quotes.push(newQuote);
                filterQuotesByCategory();
                
                // Save to local storage
                const userQuotes = quotes.filter(q => q.isUserSubmitted);
                userQuotes.push(newQuote);
                localStorage.setItem('userQuotes', JSON.stringify(userQuotes));
                
                // Clear form
                userQuoteInput.value = '';
                userAuthorInput.value = '';
                
                // Show success message
                alert("Thank you for your submission! Your quote has been added.");
            }

            function setupEventListeners() {
                // Button events
                nextQuoteBtn.addEventListener('click', displayRandomQuote);
                speakBtn.addEventListener('click', speakQuote);
                copyBtn.addEventListener('click', copyQuoteToClipboard);
                tweetBtn.addEventListener('click', shareOnTwitter);
                toggleAutoBtn.addEventListener('click', toggleAutoRotate);
                submitQuoteBtn.addEventListener('click', submitUserQuote);
                
                // Category buttons
                categoryBtns.forEach(btn => {
                    btn.addEventListener('click', function() {
                        categoryBtns.forEach(b => b.classList.remove('active'));
                        this.classList.add('active');
                        currentCategory = this.dataset.category;
                        filterQuotesByCategory();
                        displayRandomQuote();
                    });
                });
                
                // Theme toggle
                themeToggle.addEventListener('click', function() {
                    const currentTheme = document.documentElement.getAttribute('data-theme');
                    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
                    
                    document.documentElement.setAttribute('data-theme', newTheme);
                    saveSetting('theme', newTheme);
                    
                    if (newTheme === 'light') {
                        this.querySelector('.icon').textContent = '☀️';
                        this.querySelector('.text').textContent = 'Light Mode';
                    } else {
                        this.querySelector('.icon').textContent = '🌙';
                        this.querySelector('.text').textContent = 'Dark Mode';
                    }
                });
                
                // Settings sliders
                fontSizeSlider.addEventListener('input', function() {
                    document.documentElement.style.setProperty('--base-font-size', `${this.value}px`);
                    saveSetting('fontSize', this.value);
                });
                
                transitionSpeedSlider.addEventListener('input', function() {
                    document.documentElement.style.setProperty('--transition-speed', `${this.value}s`);
                    saveSetting('transitionSpeed', this.value);
                });
                
                autoRotateTimeSlider.addEventListener('input', function() {
                    if (isAutoRotateOn) {
                        clearInterval(autoRotateInterval);
                        autoRotateInterval = setInterval(displayRandomQuote, this.value * 1000);
                        toggleAutoBtn.querySelector('.text').textContent = `Auto: On (${this.value}s)`;
                    }
                    saveSetting('autoRotateTime', this.value);
                });
            }
        });

        
        document.addEventListener('DOMContentLoaded', function () {
    const fontSizeSlider = document.getElementById('fontSize');
    const transitionSpeedSlider = document.getElementById('transitionSpeed');
    const autoRotateTimeSlider = document.getElementById('autoRotateTime');
    const submitQuoteBtn = document.getElementById('submitQuoteBtn');

    const userQuoteInput = document.getElementById('userQuote');
    const userAuthorInput = document.getElementById('userAuthor');
    const userCategorySelect = document.getElementById('userCategory');
    const quoteGrid = document.getElementById('quoteGrid');

    // Font size functionality
    fontSizeSlider.addEventListener('input', function () {
      document.body.style.fontSize = this.value + 'px';
    });

    // Transition speed functionality
    transitionSpeedSlider.addEventListener('input', function () {
      document.querySelectorAll('.quote-container, .grid-quote').forEach(el => {
        el.style.transition = `opacity ${this.value}s ease-in-out`;
      });
    });

    // Submit quote
    submitQuoteBtn.addEventListener('click', function () {
      const text = userQuoteInput.value.trim();
      const author = userAuthorInput.value.trim() || 'Anonymous';
      const category = userCategorySelect.value;

      if (!text) {
        alert('Please enter a quote!');
        return;
      }

      const card = document.createElement('div');
      card.className = 'grid-quote';
      card.innerHTML = `
        <p>"${text}"</p>
        <p><strong>— ${author}</strong></p>
        <div class="quote-vote" data-score="0">
          <button onclick="vote(this, 1)">👍</button>
          <span>0</span>
          <button onclick="vote(this, -1)">👎</button>
        </div>
      `;
      quoteGrid.appendChild(card);

      userQuoteInput.value = '';
      userAuthorInput.value = '';
    });
  });

  function vote(el, change) {
    const parent = el.parentElement;
    let score = parseInt(parent.getAttribute('data-score')) || 0;
    score += change;
    parent.setAttribute('data-score', score);
    parent.innerHTML = `
      <button onclick="vote(this, 1)">👍</button>
      <span>${score}</span>
      <button onclick="vote(this, -1)">👎</button>
    `;
  }
    </script>
</body>
</html>
